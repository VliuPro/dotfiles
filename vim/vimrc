""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""''

"                       Author:             virus.ljd@gmail.com
"
"                       Create Date:        2017-01-04 00:00:00
"
"                       Description:        A Simple Vim Config
"
"                       Last Modify Date:   2017-03-03 13:31:30
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Base config {{{

let mapleader=","

" }}}

" vim-plug {{{

set nocompatible              " required
filetype off                  " required
" Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)
call plug#begin('~/.vim/plugged')

Plug 'junegunn/vim-easy-align'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'tmhedberg/SimpylFold'
Plug 'vim-scripts/indentpython.vim'
Plug 'python-mode/python-mode'
Plug 'google/yapf'
Plug 'sjl/gundo.vim'
Plug 'rking/ag.vim'
" auto complete
Plug 'Valloric/YouCompleteMe', {'for': ['c', 'cpp', 'python']}
" color theme
Plug 'morhetz/gruvbox'
Plug 'sjl/badwolf'

Plug 'w0rp/ale'
"Plug 'scrooloose/syntastic'
Plug 'nvie/vim-flake8'
Plug 'jnurmine/Zenburn'
Plug 'altercation/vim-colors-solarized'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-fugitive'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'jmcantrell/vim-virtualenv'
Plug 'scrooloose/nerdcommenter'

call plug#end()
filetype plugin indent on    " required

" }}}

" Colors {{{
set t_Co=256

if has('gui_running')
    set background=dark
    colorscheme badwolf
else
    set background=dark
    colorscheme gruvbox

    "let g:gruvbox_hls_cursor='blue'
    "let g:gruvbox_italic='1'
endif

syntax enable               " enable syntax processing

" }}}

" Spaces & Tabs {{{

set encoding=utf-8
set fileencoding=utf-8

set tabstop=4       " number of visual spaces per TAB
set softtabstop=4   " number of spaces in tab when editing
set shiftwidth=4
set expandtab       " tabs are spaces

" }}}

" UI config {{{

set mouse=i             " Automatically enable mouse usage
set mousehide           " Hide the mouse cursor while typing

set number              " show line numbers
set wrap                " wrap line
set showcmd             " show command in bottom bar
set cursorline          " highlight current line
set wildmenu            " visual autocomplete for command menu
set lazyredraw          " redraw only when we need to.
set showmatch           " highlight matching [{()}]

nnoremap <Leader><space> :nohlsearch<CR> " space open/closes folds

" ============ Syntastic Plugin
let python_highlight_all=1

" Make the gutters darker than the background.
let g:badwolf_darkgutter = 1
" Turn on CSS properties highlighting
let g:badwolf_css_props_highlight = 1

" }}}

" Searching {{{

set incsearch           " search as characters are entered
set hlsearch            " highlight matches

" }}}

" Leader shotcuts {{{

nnoremap <Leader>q :q<CR>                   " 定义快捷键关闭当前分割窗口
nnoremap <Leader>w :w<CR>                   " 定义快捷键保存当前窗口内容
nnoremap <Leader>WQ :wa<CR>:q<CR>           " 定义快捷键保存所有窗口内容并退出 vim
nnoremap <Leader>Q :qa!<CR>                 " 不做任何保存，直接退出 vim

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" edit vimrc/zshrc and load vimrc bindings
nnoremap <Leader>ev :vsp $MYVIMRC<CR>
nnoremap <Leader>ez :vsp ~/.zshrc<CR>
nnoremap <Leader>sv :source $MYVIMRC<CR>

" save session
nnoremap <Leader>s :mksession<CR>

" toggle gundo
nnoremap <Leader>u :GundoToggle<CR>

" }}} 

" Code folding {{{

set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
set foldmethod=indent   " fold based on indent level

nnoremap <space> za     " space open/closes folds

let g:SimpylFold_docstring_preview=1

" }}}

" CtrlP {{{

let g:ctrlp_cmd = 'CtrlP'
nnoremap <C-f> :CtrlPMRUFiles<CR>

let g:ctrlp_custom_ignore = {
                \    'dir': '\v[\/]\.(git)$',
                \    'file': '\v\.(exe|zip|tar|tar.gz|pyc)'
                \}

let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0

if executable('ag')
    let g:ctrlp_use_caching = 0
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" }}}

" Tmux {{{

" allows cursor change in tmux mode
if exists('$TMUX')
let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" }}}

" Autogroups {{{

augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    autocmd BufWritePre *.php,*.py,*.js,*.txt,*.hs,*.java,*.md
                \:call <SID>StripTrailingWhitespaces()
    autocmd FileType java setlocal noexpandtab
    autocmd FileType java setlocal list
    autocmd FileType java setlocal listchars=tab:+\ ,eol:-
    autocmd FileType java setlocal formatprg=par\ -w80\ -T4
    autocmd FileType php setlocal expandtab
    autocmd FileType php setlocal list
    autocmd FileType php setlocal listchars=tab:+\ ,eol:-
    autocmd FileType php setlocal formatprg=par\ -w80\ -T4
    autocmd FileType python setlocal commentstring=#\ %s
    autocmd FileType python setlocal autoindent
    autocmd FileType python setlocal fileformat=unix
    autocmd BufEnter *.cls setlocal filetype=java
    autocmd BufEnter *.zsh-theme setlocal filetype=zsh
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2
augroup END

" }}}

" Backups {{{

set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

" }}}

" Custom Functions {{{

" == Quickly Run
map <F5> :call Run()<CR>
func! Run()
:cd %:p:h
exec "w"
if &filetype == 'python'
exec "!time python %"
elseif &filetype == 'sh'
:!sh ./%
endif
endfunc

" }}}

" EasyAlign {{{

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)

" }}}

" YouCompleteMe {{{

set completeopt=menu,preview,longest
let g:ycm_autoclose_preview_window_after_completion=1
map <Leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete

" Show diagnostics
let g:ycm_always_populate_location_list = 1

" Custom error and warning symbols
let g:ycm_warning_symbol = '‼'
let g:ycm_error_symbol   = '⁇'


" }}}

" NERDTree {{{

let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree
map <C-e> :NERDTreeToggle<CR>
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$', 'node_modules']
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=1
let NERDTreeMouseMode=2
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1
let g:nerdtree_tabs_open_on_gui_startup=0

" 显示行号
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
" 是否显示隐藏文件
let NERDTreeShowHidden=1
" }}}

" Airline {{{

set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'

" }}}

" Virtualenv {{{

let g:virtualenv_directory = '~/.virtualenvs'
let g:virtualenv_stl_format = '[%n]'
set statusline+=%{virtualenv#statusline()}

" }}}

" Hight Light Python {{{

hi pythonLambdaExpr      ctermfg=105 guifg=#8787ff
hi pythonInclude         ctermfg=68  guifg=#5f87d7 cterm=bold gui=bold
hi pythonClass           ctermfg=167 guifg=#FF62B0
hi pythonParameters      ctermfg=147 guifg=#AAAAFF
hi pythonParam           ctermfg=175 guifg=#E37795
hi pythonBrackets        ctermfg=183 guifg=#d7afff
hi pythonClassParameters ctermfg=111 guifg=#FF5353
hi pythonSelf            ctermfg=174 guifg=#6094DB cterm=bold gui=bold
hi pythonDottedName      ctermfg=74  guifg=#5fafd7
hi pythonError           ctermfg=196 guifg=#ff0000
hi pythonIndentError     ctermfg=197 guifg=#ff005f
hi pythonSpaceError      ctermfg=198 guifg=#ff0087
hi pythonBuiltinType     ctermfg=74  guifg=#9191FF
hi pythonBuiltinObj      ctermfg=71  guifg=#5faf5f
hi pythonBuiltinFunc     ctermfg=140 guifg=#CB59E8 cterm=bold gui=bold

" }}}

" YAPF {{{

autocmd FileType python nnoremap <Leader>= :0,$!yapf<CR>

" }}}

" vim:foldmethod=marker:foldlevel=0
